name: Deployment

on:
  push:
    branches:
      - main
      - staging
      - develop

jobs:
  build-push-image:
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
      build_env: ${{ steps.set-env.outputs.build_env }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get short commit hash
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set build environment
        id: set-env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "build_env=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            echo "build_env=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            echo "build_env=develop" >> $GITHUB_OUTPUT
          else
            echo "build_env=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push with commit hash tag
        run: |
          docker build -t example-app-image .
          docker tag example-app-image subrotosharma/node-app:${{ steps.vars.outputs.sha_short }}
          docker push subrotosharma/node-app:${{ steps.vars.outputs.sha_short }}

  deploy-image:
    needs: build-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to AWS-EC2
        uses: appleboy/ssh-action@main
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER_NAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            BUILD_ENVIRONMENT=${{ needs.build-push-image.outputs.build_env }}
            SHA_SHORT=${{ needs.build-push-image.outputs.sha_short }}
            
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            cd example-app-environments
            pwd
            source .env

            if [ "$BUILD_ENVIRONMENT" == "production" ]; then
              sed -i "s/^PRODUCTION_APP_IMAGE_TAG=.*/PRODUCTION_APP_IMAGE_TAG=$SHA_SHORT/" .env
              container_name="$PRODUCTION_CONTAINER_NAME"
            elif [ "$BUILD_ENVIRONMENT" == "staging" ]; then
              sed -i "s/^STAGING_APP_IMAGE_TAG=.*/STAGING_APP_IMAGE_TAG=$SHA_SHORT/" .env
              container_name="$STAGING_CONTAINER_NAME"
            elif [ "$BUILD_ENVIRONMENT" == "develop" ]; then
              sed -i "s/^DEVELOP_APP_IMAGE_TAG=.*/DEVELOP_APP_IMAGE_TAG=$SHA_SHORT/" .env
              container_name="$DEVELOP_CONTAINER_NAME"
            fi

            if [ "$(docker ps -f name=$container_name -q)" ]; then
              docker stop $container_name
            fi

            old_image=$(docker ps -a -f name=$container_name --format "{{.Image}}")

            if [ "$(docker ps -a -f name=$container_name -q)" ]; then
              docker rm $container_name
            fi

            if [ -n "$old_image" ]; then
              docker rmi $old_image
            fi

            docker-compose up $BUILD_ENVIRONMENT --build -d
            docker logout
